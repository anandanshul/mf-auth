[DIR_START]app
[FILE_START]app\globals.css
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

[FILE_END]app\globals.css

[FILE_START]app\layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

[FILE_END]app\layout.tsx

[DIR_START]app\login
[FILE_START]app\login\page.tsx
'use client'
import {Login} from "@/components/Login";
import {login, signInWithGoogle, verifyUserMFA} from "@/firebase/authentication";
import {useRouter} from "next/navigation";
import {notify} from "@/utils/notify";
import {useRecaptcha} from "@/hooks/useRecaptcha";
import {useState} from "react";
import {MultiFactorResolver} from "@firebase/auth";
import {CodeSignIn} from "@/components/CodeSignIn";

export default function LoginPage() {
    const router = useRouter();
    const recaptcha = useRecaptcha('sign-in');
    const [verificationId, setVerificationId] = useState<string>();
    const [resolver, setResolver] = useState<MultiFactorResolver>();

    async function loginWithGoogle() {
        const response = await signInWithGoogle();

        if (response === true) {
            await router.push('/user');
        }else {
            await handleMFA(response);
        }
    }

    async function loginWithEmailAndPassword(email: string, password: string) {
        const response = await login(email, password);

        if (response === true) {
            await router.push('/user');
        }else {
            await handleMFA(response);
        }
    }

    async function handleMFA(response: any) {
        if (response.code === 'auth/multi-factor-auth-required' && recaptcha) {
            const data = await verifyUserMFA(
                response,
                recaptcha,
                0
            )

            if (!data) {
                notify('Something went wrong.');
            }else {
                const {verificationId, resolver} = data;
                setVerificationId(verificationId);
                setResolver(resolver);
            }
        }else {
            notify('Something went wrong');
        }
    }

    return (
        <>
            {
                !verificationId &&
                !resolver &&
                <Login
                    loginWithGoogle={loginWithGoogle}
                    loginWithEmailAndPassword={loginWithEmailAndPassword}
                />
            }
            {
                verificationId &&
                resolver &&
                <CodeSignIn
                    verificationId={verificationId}
                    resolver={resolver}
                />
            }
            <div id='sign-in'></div>
        </>
    )
}
[FILE_END]app\login\page.tsx

[DIR_END]app\login

[DIR_START]app\mfa
[FILE_START]app\mfa\page.tsx
'use client'
import {useCurrentUser} from "@/hooks/useCurrentUser";
import {useRouter} from "next/navigation";
import {Loading} from "@/components/Loading";
import {CreateMultiFactorAuthentication} from "@/components/CreateMultiFactorAuthentication";

export default function MFAPage() {
    const currentUser = useCurrentUser();
    const router = useRouter();

    if (currentUser === 'loading') {
        return <Loading />
    }

    if (!currentUser) {
        void router.push('/login');
    }

    return <CreateMultiFactorAuthentication currentUser={currentUser} />
}
[FILE_END]app\mfa\page.tsx

[DIR_END]app\mfa

[FILE_START]app\page.tsx
"use-client"
import Image from "next/image";

export default function Home() {
  return (
    <>
      Firebase MFA
    </>    
  );
}

[FILE_END]app\page.tsx

[DIR_START]app\sign-up
[FILE_START]app\sign-up\page.tsx
'use client'
import { SignUp } from "@/components/SignUp";
import { useCurrentUser } from "@/hooks/useCurrentUser";
import { useRouter } from "next/navigation";
import { Loading } from "@/components/Loading";
import { useEffect } from "react";

export default function SignUpPage() {
    const currentUser = useCurrentUser();
    const router = useRouter();

    useEffect(() => {
        if (currentUser && currentUser !== 'loading') {
            void router.push('/user');
        }
    }, [currentUser, router]);

    if (currentUser === 'loading') {
        return <Loading />;
    }

    return <SignUp />;
}

[FILE_END]app\sign-up\page.tsx

[DIR_END]app\sign-up

[DIR_START]app\user
[FILE_START]app\user\page.tsx
'use client'
import { useEffect } from "react";
import { UserComponent } from "@/components/UserComponent";
import { useCurrentUser } from "@/hooks/useCurrentUser";
import { Loading } from "@/components/Loading";
import { useRouter } from "next/navigation";

export default function UserPage() {
    const currentUser = useCurrentUser();
    const router = useRouter();

    useEffect(() => {
      if (currentUser === null) {
        void router.push('login');
      }
    }, [currentUser, router]);

    if (currentUser === 'loading') {
        return <Loading />;
    }

    // While waiting for router.push to complete, you can return null
    if (!currentUser) {
        return null;
    }

    return <UserComponent currentUser={currentUser} />;
}

[FILE_END]app\user\page.tsx

[DIR_END]app\user

[DIR_END]app

[DIR_START]components
[FILE_START]components\Code.tsx
'use client'
import { useRouter } from "next/navigation";
import { Input } from "@/components/Input";

type Props = {
  getCode: (code: string) => void;
};

export function Code({ getCode }: Props) {
  const router = useRouter();
  let code = new Array<string>(6).fill("");

  function handleClick() {
    const finalCode = code.reduce((previousValue, currentValue) => {
      return previousValue.concat(currentValue);
    });
    getCode(finalCode);
  }

  return (
    <div className="bg-white flex flex-col p-5 md:p-6  border-2 border-palladium rounded-xl w-full sm:max-w-[440px]">
      <div className="flex justify-between">
        <div>
          <h1 className="font-medium text-[22px] leading-[130%] md:mr-8">
            Verify your phone
          </h1>
          <p className="text-slate-500 mt-2 text-base">
            We sent you an SMS code to your phone number
          </p>
        </div>
      </div>
      <div className="flex gap-x-4 mt-6 md:mt-8 pb-4">
        {code.map((value, index) => {
          return (
            <Input
              key={index}
              index={index}
              getValue={(value, index) => {
                code[index] = value;
              }}
            />
          );
        })}
      </div>
      <div className="flex mt-4 gap-x-4">
        <button
          onClick={() => void router.push("/user")}
          className="rounded-xl flex gap-x-4 mb-8 text-black h-11 w-1/2 items-center justify-center px-6 border border-gray-500"
        >
          Cancel
        </button>
        <button
          onClick={handleClick}
          className="bg-black rounded-xl flex h-11 w-1/2 items-center justify-center px-6"
        >
          <span className="text-base font-light text-white">Submit</span>
        </button>
      </div>
    </div>
  );
}

[FILE_END]components\Code.tsx

[FILE_START]components\CodeSignIn.tsx
'use client'
import {MultiFactorResolver} from "@firebase/auth";
import {Code} from "@/components/Code";
import {verifyUserEnrolled} from "@/firebase/authentication";
import {useRouter} from "next/navigation";
import {notify} from "@/utils/notify";

type Props = {
    verificationId: string,
    resolver: MultiFactorResolver
}
export function CodeSignIn({verificationId, resolver}: Props) {
    const router = useRouter();

    async function getCode(code: string) {
        const response = await verifyUserEnrolled(
            {
                verificationId,
                resolver
            },
            code
        );

        if (response) {
            await router.push('/user');
        }else {
            notify('Something went wrong.');
        }
    }
    return (
        <Code
            getCode={getCode}
        />
    )
}
[FILE_END]components\CodeSignIn.tsx

[FILE_START]components\CodeSignup.tsx
'use client'
import {Code} from "@/components/Code";
import {User} from "@firebase/auth";
import {enrollUser} from "@/firebase/authentication";
import {useRouter} from "next/navigation";
import {notify} from "@/utils/notify";

type Props = {
    currentUser: User,
    verificationCodeId: string
}

export function CodeSignup({currentUser, verificationCodeId}: Props) {
    const router = useRouter();

    async function getCode(code: string) {
        const response = await enrollUser(
            currentUser,
            verificationCodeId,
            code
        );

        if (response) {
            await router.push('/user');
        }else {
            notify('Something went wrong.');
        }
    }

    return <Code getCode={getCode} />
}
[FILE_END]components\CodeSignup.tsx

[FILE_START]components\CreateMultiFactorAuthentication.tsx
'use client'
import {User} from "@firebase/auth";
import {useRecaptcha} from "@/hooks/useRecaptcha";
import {PhoneRegistration} from "@/components/PhoneRegistration";
import {verifyPhoneNumber} from "@/firebase/authentication";
import {notify} from "@/utils/notify";
import {useState} from "react";
import {CodeSignup} from "@/components/CodeSignup";

type Props = {
    currentUser: User | null
}
export function CreateMultiFactorAuthentication({currentUser}: Props) {
    const recaptcha = useRecaptcha('sign-up');
    const [verificationCodeId, setVerificationCodeId] = useState<string | null>(null);

    async function getPhoneNumber(phoneNumber: string) {
        if (!currentUser || !recaptcha) {
            return;
        }

        const verificationId = await verifyPhoneNumber(
            currentUser,
            phoneNumber,
            recaptcha
        );

        if (!verificationId) {
            notify('Something went wrong.');
        }else {
            setVerificationCodeId(verificationId);
        }
    }

    return (
        <>
            {
                !verificationCodeId &&
                <PhoneRegistration
                    getPhoneNumber={getPhoneNumber}
                />
            }
            {
                verificationCodeId &&
                currentUser &&
                <CodeSignup
                    currentUser={currentUser}
                    verificationCodeId={verificationCodeId}
                />
            }
            <div id='sign-up'></div>
        </>
    )
}
[FILE_END]components\CreateMultiFactorAuthentication.tsx

[FILE_START]components\Input.tsx
'use client'
import {ChangeEvent, useState} from "react";

type Props = {
    index: number,
    getValue: (value: string, index: number) => void
}

export function Input({index, getValue}: Props) {
    const [value, setValue] = useState<string>('');

    function checkValue(event: ChangeEvent<HTMLInputElement>) {
        const currentValue = event.currentTarget.value.slice(-1);
        setValue(currentValue);
        getValue(currentValue, index);

        const nextElement = event.currentTarget.nextSibling;
        if (nextElement instanceof HTMLInputElement) {
            nextElement.disabled = false;
            nextElement.focus();
        }
    }

    return (
        <input
            value={value}
            disabled={index > 0}
            onChange={checkValue}
            className="transition ease-in-out duration-300 flex flex-1 items-center disabled:cursor-not-allowed border-2 outline-none focus:outline-none focus:shadow-[0_0_0_4px_rgba(209,213,218,0.45)] focus:border-2 h-[44px] md:h-[52px] w-full px-4 rounded-xl"
            type="number"
        />
    )
}
[FILE_END]components\Input.tsx

[FILE_START]components\Loading.tsx
'use client'
export function Loading() {
  return (
      <div className="bg-white h-screen w-screen">
          <div className='flex flex-col justify-center items-center px-12 gap-y-12 pt-40'>
              <h2 className="mt-20 text-3xl text-center font-bold text-gray-800">
                  Loading...
              </h2>
          </div>
      </div>
  );
}
[FILE_END]components\Loading.tsx

[FILE_START]components\Login.tsx
'use client'
import {At, GoogleLogo, Password} from "phosphor-react";
import Link from "next/link";
import {FormEvent, useRef} from "react";

type Props = {
    loginWithGoogle: () => void,
    loginWithEmailAndPassword: (email: string, password: string) => void
}

export function Login({loginWithGoogle, loginWithEmailAndPassword}: Props) {
    const email = useRef<HTMLInputElement>(null);
    const password = useRef<HTMLInputElement>(null);

    function handleSubmit(event: FormEvent<HTMLFormElement>) {
        event.preventDefault();

        if (email.current && password.current) {
            loginWithEmailAndPassword(email.current.value, password.current.value);
        }
    }

    return (
        <div className="bg-white md:w-[500px] rounded-xl p-8">
            <h2 className="mt-20 mb-8 text-3xl font-bold text-center text-gray-800">Welcome back</h2>
            <button
                onClick={loginWithGoogle}
                className="rounded-xl flex gap-x-4 mb-8 text-black h-11 w-full items-center justify-center px-6 border border-gray-500">
                <GoogleLogo className='w-6 h-6'/>
                <span className="relative text-base font-light">with Google</span>
            </button>
            <p className='text-center mb-8'>Or</p>
            <form
                className="space-y-8"
                onSubmit={handleSubmit}
            >
                <div className="space-y-4">
                    <div className="relative flex items-center">
                        <At className='w-6 h-6 absolute left-4 inset-y-0 my-auto'/>
                        <input
                            ref={email}
                            type="email"
                            name="email"
                            placeholder="Insert your email"
                            className="focus:outline-none
                                        block w-full rounded-xl placeholder-gray-500
                                        bg-gray-100 pl-12 pr-4 h-12 text-gray-600 transition
                                        duration-300 invalid:ring-2 invalid:ring-red-400
                                        focus:ring-2 focus:ring-black"
                        />
                    </div>
                </div>
                <div className="space-y-4 my-6">
                    <div className="relative flex items-center">
                        <Password className='w-6 h-6 absolute left-4 inset-y-0 my-auto'/>
                        <input
                            ref={password}
                            type="password"
                            name="password"
                            id="password"
                            placeholder="Insert your password"
                            className="focus:outline-none block w-full rounded-xl placeholder-gray-500 bg-gray-100 pl-12 pr-4 h-12 text-gray-600 transition duration-300 invalid:ring-2 invalid:ring-red-400 focus:ring-2 focus:ring-black"
                        />
                    </div>
                </div>
                <button type="submit"
                        className="bg-black rounded-xl flex h-11 w-full items-center justify-center px-6">
                                <span
                                    className="text-base font-light text-white">
                                    Login
                                </span>
                </button>
                <p className="border-t border-gray-100 pt-6 text-center text-sm text-gray-500">
                    Don't have an account ?<Link href="/sign-up" className="text-black"> Sign up</Link>
                </p>
            </form>
        </div>
    )
}
[FILE_END]components\Login.tsx

[FILE_START]components\PhoneRegistration.tsx
'use client'
import {Chat} from "phosphor-react";
import {useRouter} from "next/navigation";
import {useRef} from "react";

type Props = {
    getPhoneNumber: (phoneNumber: string) => void
}

export function PhoneRegistration({getPhoneNumber}: Props) {
    const router = useRouter();
    const phoneNumber = useRef<HTMLInputElement>(null);

    function handleClick() {
        if (phoneNumber.current) {
            getPhoneNumber(phoneNumber.current.value);
        }
    }

    return (
        <div className='flex sm:justify-center items-center px-4 sm:px-0'>
            <div className="bg-white flex flex-col p-5 md:p-6  border-2 shadow-md shadow-gray-100/10  border-palladium rounded-xl w-full sm:max-w-[440px]">
                <div className="flex flex-col justify-between">
                    <h1 className='font-medium text-[22px] leading-[130%] md:mr-8'>Provide your phone</h1>
                    <p className='text-slate-500 mt-2 text-base'>Fill in your phone number to receive the code</p>
                </div>
                <div className="space-y-4 my-6">
                    <div className="relative flex items-center">
                        <Chat weight='fill' className='w-6 h-6 absolute left-4 inset-y-0 my-auto'/>
                        <input
                            ref={phoneNumber}
                            type="tel"
                            name="phone"
                            id="phone"
                            placeholder="Insert your phone number"
                            className="focus:outline-none block w-full rounded-xl placeholder-gray-500 bg-gray-100 pl-12 pr-4 h-12 text-gray-600 transition duration-300 invalid:ring-2 invalid:ring-red-400 focus:ring-2 focus:ring-black"
                        />
                    </div>
                </div>
                <div className="flex justify-between mt-4 gap-x-4">
                    <button
                        onClick={() => void router.push('/user')}
                        className='rounded-xl flex gap-x-4 mb-8 text-black h-11 w-1/2 items-center justify-center px-6 border border-gray-500'>Cancel</button>
                    <button
                        onClick={handleClick}
                        className="bg-black rounded-xl flex h-11 w-1/2 items-center justify-center px-6">
                        <span
                            className="text-base font-light text-white">
                            Send SMS
                        </span>
                    </button>
                </div>
            </div>
        </div>
    )
}
[FILE_END]components\PhoneRegistration.tsx

[FILE_START]components\SignUp.tsx
'use client'
import {At, GoogleLogo, Password} from "phosphor-react";
import Link from "next/link";
import {signInWithGoogle, signUp} from "@/firebase/authentication";
import {notify} from "@/utils/notify";
import {FormEvent, useRef} from "react";

export function SignUp() {
    const email = useRef<HTMLInputElement>(null);
    const password = useRef<HTMLInputElement>(null);

    async function loginWithGoogle() {
        const response = await signInWithGoogle();

        if (response !== true) {
            notify('Something went wrong');
        }
    }

    async function createAnAccount(event: FormEvent<HTMLFormElement>) {
        event.preventDefault();

        if (email.current && password.current) {
            const response = await signUp(email.current.value, password.current.value);

            if (!response) {
                notify('Something went wrong.');
            }
        }
    }

    return (
        <div className="bg-white md:w-[500px] rounded-xl p-8">
            <h2 className="mt-20 mb-8 text-3xl font-bold text-center text-gray-800">Create an account</h2>
            <button
                onClick={loginWithGoogle}
                className="rounded-xl relative flex gap-x-4 mb-8 text-black h-11 w-full items-center justify-center px-6 border border-gray-500">
                <GoogleLogo className='w-6 h-6'/>
                <span className="relative text-base font-light">with Google</span>
            </button>
            <p className='text-center mb-8'>Or</p>
            <form
                className="space-y-8"
                onSubmit={createAnAccount}
            >
                <div className="space-y-4">
                    <div className="relative flex items-center">
                        <At className='w-6 h-6 absolute left-4 inset-y-0 my-auto'/>
                        <input
                            ref={email}
                            type="email"
                            name="email"
                            placeholder="Insert your email"
                            className="focus:outline-none
                                        block w-full rounded-xl placeholder-gray-500
                                        bg-gray-100 pl-12 pr-4 h-12 text-gray-600 transition
                                        duration-300 invalid:ring-2 invalid:ring-red-400
                                        focus:ring-2 focus:ring-black"
                        />
                    </div>
                </div>
                <div className="space-y-4">
                    <div className="relative flex items-center">
                        <Password className='w-6 h-6 absolute left-4 inset-y-0 my-auto'/>
                        <input
                            ref={password}
                            type="password"
                            name="password"
                            id="password"
                            placeholder="Insert your password"
                            className="focus:outline-none block w-full rounded-xl placeholder-gray-500 bg-gray-100 pl-12 pr-4 h-12 text-gray-600 transition duration-300 invalid:ring-2 invalid:ring-red-400 focus:ring-2 focus:ring-black"
                        />
                    </div>
                </div>
                <button type="submit"
                        className="bg-black rounded-xl relative flex h-11 w-full items-center justify-center px-6 before:absolute before:inset-0 before:rounded-full before:bg-primary before:transition before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95">
                                <span
                                    className="relative text-base font-light text-white">Sign Up</span>
                </button>
                <p className="border-t border-gray-100 pt-6 text-center text-sm text-gray-500">
                    Do you have an account ?<Link href="/login" className="text-black"> Login</Link>
                </p>
            </form>
        </div>
    )
}
[FILE_END]components\SignUp.tsx

[FILE_START]components\UserComponent.tsx
'use client'
import {logout, verifyIfUserIsEnrolled, verifyUserEmail} from "@/firebase/authentication";
import {User} from "@firebase/auth";
import Link from "next/link";
import {notify} from "@/utils/notify";

type Props = {
    currentUser: User | null;
}

export function UserComponent({currentUser}: Props) {

    async function sendEmail() {
        if (currentUser) {
            const response = await verifyUserEmail(currentUser);

            if (response) {
                notify('An Email has been sent to you');
            }else {
                notify('Something went wrong');
            }
        }
    }

    return (
        <div className="bg-white h-screen w-screen">
            <div className='flex flex-col justify-center items-center px-12 gap-y-12 pt-40'>
                <h2 className="mt-20 text-3xl text-center font-bold text-gray-800">Hello 👋</h2>
                {
                    currentUser && currentUser.emailVerified && !verifyIfUserIsEnrolled(currentUser) &&
                    <Link className='hover:text-black underline text-center w-full' href='/mfa'>
                        Activate the multifactor authentication
                    </Link>
                }
                {
                    currentUser && !currentUser.emailVerified && !verifyIfUserIsEnrolled(currentUser) &&
                    <button
                        onClick={sendEmail}
                        className='hover:text-black underline text-center w-full'>
                        Verify your email
                    </button>
                }
                <button
                    onClick={logout}
                    className="bg-black rounded-xl flex h-11 items-center justify-center px-6">
                <span className="relative text-base font-light text-white">
                    Disconnect
                </span>
                </button>
            </div>
        </div>
    )
}
[FILE_END]components\UserComponent.tsx

[DIR_END]components

[FILE_START]eslint.config.mjs
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

[FILE_END]eslint.config.mjs

[DIR_START]firebase
[FILE_START]firebase\authentication.ts
import {
  ApplicationVerifier,
  Auth,
  createUserWithEmailAndPassword,
  getAuth,
  getMultiFactorResolver,
  GoogleAuthProvider,
  multiFactor,
  MultiFactorError,
  MultiFactorResolver,
  PhoneAuthProvider,
  PhoneMultiFactorGenerator,
  sendEmailVerification,
  signInWithEmailAndPassword,
  signInWithPopup,
  signOut,
  User,
} from "@firebase/auth";
import {app} from "@/firebase/init";
// import {getModuleResolver} from "@typescript-eslint/typescript-estree/dist/create-program/shared";

export const auth: Auth = getAuth(app);

export async function signInWithGoogle(): Promise<any> {
  try {
    await signInWithPopup(auth, new GoogleAuthProvider());
    return true;
  } catch (e) {
    return e;
  }
}

export async function signUp(
  email: string,
  password: string
): Promise<boolean> {
  try {
    await createUserWithEmailAndPassword(auth, email, password);
    return true;
  } catch (e) {
    return false;
  }
}

export async function login(email: string, password: string): Promise<any> {
  try {
    await signInWithEmailAndPassword(auth, email, password);
    return true;
  } catch (e) {
    return e;
  }
}

export async function logout(): Promise<boolean> {
  try {
    await signOut(auth);
    return true;
  } catch (e) {
    return false;
  }
}

export function verifyIfUserIsEnrolled(user: User) {
  const enrolledFactors = multiFactor(user).enrolledFactors;
  return enrolledFactors.length > 0;
}

export async function verifyPhoneNumber(
  user: User,
  phoneNumber: string,
  recaptchaVerifier: ApplicationVerifier
): Promise<false | string> {
  const session = await multiFactor(user).getSession();
  if (!session) {
    console.error("Failed to get MFA session. Check MFA configuration.");
    return false;
  }

  const phoneInfoOptions = {
    phoneNumber,
    session,
  };

  const phoneAuthProvider = new PhoneAuthProvider(auth);
  try {
    return await phoneAuthProvider.verifyPhoneNumber(
      phoneInfoOptions,
      recaptchaVerifier
    );
  } catch (e) {
    return false;
  }
}

export async function enrollUser(
  user: User,
  verificationCodeId: string,
  verificationCode: string
) {
  const phoneAuthCredential = PhoneAuthProvider.credential(
    verificationCodeId,
    verificationCode
  );
  const multiFactorAssertion =
    PhoneMultiFactorGenerator.assertion(phoneAuthCredential);

  try {
    await multiFactor(user).enroll(
      multiFactorAssertion,
      "Personal Phone Number"
    );
    return true;
  } catch (e) {
    return false;
  }
}

export async function verifyUserMFA(
  error: MultiFactorError,
  recaptchaVerifier: ApplicationVerifier,
  selectedIndex: number
): Promise<
  false | { verificationId: string; resolver: MultiFactorResolver } | void
> {
  const resolver = getMultiFactorResolver(auth, error);

  if (
    resolver.hints[selectedIndex].factorId ===
    PhoneMultiFactorGenerator.FACTOR_ID
  ) {
    const phoneInfoOptions = {
      multiFactorHint: resolver.hints[selectedIndex],
      session: resolver.session,
    };

    const phoneAuthProvider = new PhoneAuthProvider(auth);

    try {
      if (!recaptchaVerifier) {
        console.error("RecaptchaVerifier is not initialized.");
        return false;
      }

      const verificationId = await phoneAuthProvider.verifyPhoneNumber(
        phoneInfoOptions,
        recaptchaVerifier
      );
      return { verificationId, resolver };
    } catch (e) {
      console.error("Error verifying phone number:", e);
      return false;
    }
  }
}

export async function verifyUserEnrolled(
  verificationMFA: { verificationId: string; resolver: MultiFactorResolver },
  verificationCode: string
) {
  const { verificationId, resolver } = verificationMFA;
  const credentials = PhoneAuthProvider.credential(
    verificationId,
    verificationCode
  );
  const multiFactorAssertion = PhoneMultiFactorGenerator.assertion(credentials);

  try {
    await resolver.resolveSignIn(multiFactorAssertion);
    return true;
  } catch (e) {
    return false;
  }
}

export async function verifyUserEmail(user: User): Promise<boolean> {
  try {
    await sendEmailVerification(user);
    return true;
  } catch (e) {
    return false;
  }
}

[FILE_END]firebase\authentication.ts

[FILE_START]firebase\init.ts
import {FirebaseApp, getApp, getApps, initializeApp} from "@firebase/app";

const firebaseConfig = {
  apiKey: "AIzaSyCnEUnD4vgRS9gNu8iAEw0lNxTTc_94Bg4",
  authDomain: "fir-mfa-e8bd4.firebaseapp.com",
  projectId: "fir-mfa-e8bd4",
  storageBucket: "fir-mfa-e8bd4.firebasestorage.app",
  messagingSenderId: "576561087289",
  appId: "1:576561087289:web:74053cc66472b4f121dee8"
};

let app: FirebaseApp;

if (getApps().length === 0) {
    app = initializeApp(firebaseConfig);
}else {
    app = getApp();
}

export {app}
[FILE_END]firebase\init.ts

[DIR_END]firebase

[DIR_START]hooks
[FILE_START]hooks\useCurrentUser.tsx
'use client'
import {useEffect, useState} from "react";
import {onAuthStateChanged, User} from "@firebase/auth";
import {auth} from "@/firebase/authentication";

export function useCurrentUser() {
    const [currentUser, setCurrentUser] = useState<User | null | "loading">("loading");

    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, (user) => {
            setCurrentUser(user);
        });

        return () => unsubscribe();
    })

    return currentUser;
}
[FILE_END]hooks\useCurrentUser.tsx

[FILE_START]hooks\useRecaptcha.tsx
'use client'
import {useEffect, useState} from "react";
import {ApplicationVerifier, RecaptchaVerifier} from "@firebase/auth";
import {auth} from "@/firebase/authentication";

export function useRecaptcha(componentId: string) {
    const [recaptcha, setRecaptcha] = useState<ApplicationVerifier>();

    useEffect(() => {
        const recaptchaVerifier = new RecaptchaVerifier(auth, componentId, {
            "size": "invisible",
            "callback": () => {}
        });

        setRecaptcha(recaptchaVerifier);

        return () => {
            recaptchaVerifier.clear();
        }
    }, [componentId]);

    return recaptcha;
}
[FILE_END]hooks\useRecaptcha.tsx

[DIR_END]hooks

[FILE_START]next.config.ts
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

[FILE_END]next.config.ts

[FILE_START]package.json
{
  "name": "mf-auth",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "firebase": "^11.5.0",
    "next": "15.2.3",
    "phosphor-react": "^1.4.1",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hot-toast": "^2.5.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.3",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}

[FILE_END]package.json

[FILE_START]postcss.config.mjs
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

[FILE_END]postcss.config.mjs

[DIR_START]public
[DIR_END]public

[FILE_START]README.md
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
# mf-auth

[FILE_END]README.md

[DIR_START]utils
[FILE_START]utils\notify.ts
"use client"
import toast from "react-hot-toast";

export function notify(message: string) {
    toast(message, {
        duration: 5000,
        position: "top-right"
    });
}
[FILE_END]utils\notify.ts

[DIR_END]utils

